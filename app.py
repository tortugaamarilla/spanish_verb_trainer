import streamlit as st
import requests
import json
import time
import random
import anthropic
import openai
import elevenlabs
import unicodedata
import base64
from elevenlabs.client import ElevenLabs
import re
import httpx

# –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit
st.set_page_config(
    page_title="–¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ",
    page_icon="üá™üá∏",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Streamlit
hide_streamlit_style = """
<style>
    /* –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit */
    #MainMenu {visibility: hidden !important;}
    footer {visibility: hidden !important;}
    header {visibility: hidden !important;}
    .stDeployButton {display: none !important;}
    .viewerBadge_container__1QSob {visibility: hidden !important;}
    .styles_viewerBadge__1yB5_, .viewerBadge_link__1S137, .viewerBadge_text__1JaDK {visibility: hidden !important;}
    div[data-testid="stToolbar"] {visibility: hidden !important;}
    div[data-testid="stDecoration"] {visibility: hidden !important;}
    div[data-testid="stStatusWidget"] {visibility: hidden !important;}
    
    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è */
    button[data-testid="baseButton-headerNoPadding"] {display: none !important;}
    [data-testid="stHeader"] {display: none !important;}
    .st-emotion-cache-h5rgaw {display: none !important;}
    ._terminalButton_rix23_138 {display: none !important;}
    [data-testid="manage-app-button"] {display: none !important;}
    button.st-emotion-cache-iiif1v {display: none !important;}
    .st-emotion-cache-18ni7ap {display: none !important;}
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –±–µ–π–¥–∂ Streamlit –∏ –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
    ._container_gzau3_1 {display: none !important;}
    ._viewerBadge_nim44_23 {display: none !important;}
    ._profileContainer_gzau3_53 {display: none !important;}
    ._profilePreview_gzau3_63 {display: none !important;}
    [data-testid="appCreatorAvatar"] {display: none !important;}
    a[href*="streamlit.io/cloud"] {display: none !important;}
    a[href*="share.streamlit.io/user"] {display: none !important;}
    
    /* –î–ª—è –≤—Å–µ—Ö svg –≤–Ω—É—Ç—Ä–∏ —Å–∫—Ä—ã–≤–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
    ._container_gzau3_1 svg, 
    ._viewerBadge_nim44_23 svg {
        display: none !important;
    }
    
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è */
    .stButton button {
        width: 100%;
        margin-bottom: 10px;
    }
    .css-1d391kg {
        padding: 1rem 1rem;
    }
    input[type="text"] {
        font-size: 18px !important;
        height: 50px !important;
    }
    .st-emotion-cache-16idsys p {
        font-size: 18px;
    }
    .st-emotion-cache-5rimss {
        font-size: 18px;
    }
    @media (max-width: 600px) {
        .st-emotion-cache-16idsys p {
            font-size: 16px;
        }
        .st-emotion-cache-5rimss {
            font-size: 16px;
        }
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø—Ä—è—Ç–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ */
    .settings-section {
        margin-top: 30px;
        padding: 10px;
        border-top: 1px solid #ddd;
    }
</style>
"""
st.markdown(hide_streamlit_style, unsafe_allow_html=True)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit —Å –ø–æ–º–æ—â—å—é JavaScript
hide_streamlit_js = """
<script>
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    function hideElements() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã Streamlit
        const elementsToHide = [
            'header', 
            'footer', 
            '.stDeployButton', 
            '#MainMenu',
            '[data-testid="stToolbar"]',
            '[data-testid="stDecoration"]',
            '[data-testid="stStatusWidget"]',
            '.viewerBadge_container__1QSob',
            '.styles_viewerBadge__1yB5_', 
            '.viewerBadge_link__1S137', 
            '.viewerBadge_text__1JaDK',
            '[data-testid="baseButton-headerNoPadding"]',
            '[data-testid="stHeader"]',
            '.st-emotion-cache-h5rgaw',
            '._terminalButton_rix23_138',
            '[data-testid="manage-app-button"]',
            'button.st-emotion-cache-iiif1v',
            '.st-emotion-cache-18ni7ap',
            '._container_gzau3_1',
            '._viewerBadge_nim44_23',
            '._profileContainer_gzau3_53',
            '._profilePreview_gzau3_63',
            '[data-testid="appCreatorAvatar"]',
            'a[href*="streamlit.io/cloud"]',
            'a[href*="share.streamlit.io/user"]'
        ];
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
        function hideElement(el) {
            if (el) {
                el.style.display = 'none';
                el.style.visibility = 'hidden';
                el.style.opacity = '0';
                el.style.pointerEvents = 'none';
                el.style.height = '0';
                el.style.width = '0';
                el.style.position = 'absolute';
                el.style.zIndex = '-9999';
                el.style.overflow = 'hidden';
            }
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫—Ä—ã—Ç–∏–µ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        elementsToHide.forEach(selector => {
            const elements = document.querySelectorAll(selector);
            elements.forEach(hideElement);
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ streamlit
        document.querySelectorAll('a').forEach(a => {
            if (a.href && (a.href.includes('streamlit.io') || a.href.includes('share.streamlit'))) {
                hideElement(a);
            }
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ svg –≤–Ω—É—Ç—Ä–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        document.querySelectorAll('._container_gzau3_1 svg, ._viewerBadge_nim44_23 svg').forEach(hideElement);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –∏ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    hideElements();
    setTimeout(hideElements, 500);
    setTimeout(hideElements, 1000);
    setTimeout(hideElements, 2000);
    setTimeout(hideElements, 5000);
    
    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ DOM, —á—Ç–æ–±—ã —Å–∫—Ä—ã–≤–∞—Ç—å –≤–Ω–æ–≤—å –ø–æ—è–≤–ª—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
    const observer = new MutationObserver(function(mutations) {
        hideElements();
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ DOM
    observer.observe(document.body, { 
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class', 'style', 'href']
    });
</script>
"""
st.markdown(hide_streamlit_js, unsafe_allow_html=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
elevenlabs_api_key = st.secrets["ELEVENLABS_API_KEY"]
anthropic_api_key = st.secrets["ANTHROPIC_API_KEY"]
openai_api_key = st.secrets["OPENAI_API_KEY"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ API
elevenlabs_client = ElevenLabs(api_key=elevenlabs_api_key)

# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
VERBS_LIST_1 = []
VERBS_LIST_2 = []
VERBS_SESSION_1 = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
VERBS_SESSION_2 = []  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≥–æ–ª—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
try:
    with open('verbs_list_1.txt', 'r', encoding='utf-8') as f:
        VERBS_LIST_1 = [line.strip() for line in f if line.strip()]
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ verbs_list_1.txt: {str(e)}")

try:
    with open('verbs_list_2.txt', 'r', encoding='utf-8') as f:
        VERBS_LIST_2 = [line.strip() for line in f if line.strip()]
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ verbs_list_2.txt: {str(e)}")

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏."""
    if 'response_history' not in st.session_state:
        st.session_state.response_history = []
    
    if 'current_exercise' not in st.session_state:
        st.session_state.current_exercise = None
    
    if 'show_explanation' not in st.session_state:
        st.session_state.show_explanation = False
    
    if 'selected_topics' not in st.session_state:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ç–µ–º—ã
        st.session_state.selected_topics = {
            'Presente': True,
            'Pret√©rito indefinido (perfecto simple)': True,
            'Pret√©rito imperfecto': True,
            'Pret√©rito perfecto compuesto': True, 
            'Futuro simple': True,
            'Futuro compuesto': True,
            'Imperativo': True,
            'Participio': True,
            'Gerundio': True,
            'Pronombres': True,
            'Par√°frasis': True
        }
    
    if 'user_input' not in st.session_state:
        st.session_state.user_input = ""
    
    if 'submitted' not in st.session_state:
        st.session_state.submitted = False
    
    if 'previous_response' not in st.session_state:
        st.session_state.previous_response = ""
    
    if 'used_verbs' not in st.session_state:
        st.session_state.used_verbs = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
    
    if 'settings_expanded' not in st.session_state:
        st.session_state.settings_expanded = False
    
    if 'selected_model' not in st.session_state:
        st.session_state.selected_model = "claude-haiku"
    
    if 'speech_rate' not in st.session_state:
        st.session_state.speech_rate = 0.8
    
    if 'gender_preference' not in st.session_state:
        st.session_state.gender_preference = "–ú—É–∂—Å–∫–æ–π"
    
    if 'user_answer' not in st.session_state:
        st.session_state.user_answer = ""
    
    if 'correct' not in st.session_state:
        st.session_state.correct = None
    
    if 'show_translation' not in st.session_state:
        st.session_state.show_translation = False
    
    if 'audio_ready' not in st.session_state:
        st.session_state.audio_ready = False
    
    if 'audio_data' not in st.session_state:
        st.session_state.audio_data = None
    
    if 'show_settings' not in st.session_state:
        st.session_state.show_settings = False
    
    if 'selected_voice' not in st.session_state:
        st.session_state.selected_voice = "Jhenny Antiques"
    
    if 'voice_id' not in st.session_state:
        st.session_state.voice_id = "2Lb1en5ujrODDIqmp7F3"  # ID –¥–ª—è Jhenny Antiques –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if 'needs_new_exercise' not in st.session_state:
        st.session_state.needs_new_exercise = False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
    if 'verbs_session_1' not in st.session_state:
        st.session_state.verbs_session_1 = []
        
    if 'verbs_session_2' not in st.session_state:
        st.session_state.verbs_session_2 = []

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ üá™üá∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
initialize_session_state()

# –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
TENSES = [
    "Presente",
    "Pret√©rito indefinido (perfecto simple)",
    "Pret√©rito imperfecto",
    "Pret√©rito perfecto compuesto",
    "Futuro simple",
    "Futuro compuesto",
    "Imperativo"
]

FORMS = [
    "Participio",
    "Gerundio"
]

PRONOUNS = [
    "Pronombres"
]

CONSTRUCTIONS = [
    "Estar + gerundio",
    "Ir a + infinitivo",
    "Acabar de + infinitivo",
    "Tener que + infinitivo",
    "Deber + infinitivo",
    "Poder + infinitivo",
    "Volver a + infinitivo"
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø —Ç–µ–º
TOPIC_GROUPS = {
    'Par√°frasis': CONSTRUCTIONS
}

def normalize_spanish_text(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏—Å–ø–∞–Ω—Å–∫–∏–π —Ç–µ–∫—Å—Ç: —É–¥–∞–ª—è–µ—Ç –∞–∫—Ü–µ–Ω—Ç—ã –∏ –∑–∞–º–µ–Ω—è–µ—Ç √± –Ω–∞ n"""
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º √± –Ω–∞ n
    text = text.replace("√±", "n").replace("√ë", "N")
    # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏ (–∞–∫—Ü–µ–Ω—Ç—ã)
    return ''.join(c for c in unicodedata.normalize('NFD', text)
                  if unicodedata.category(c) != 'Mn')

def get_llm_response(prompt, model="claude-haiku"):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π LLM –º–æ–¥–µ–ª–∏"""
    try:
        if model.startswith("claude"):
            client = anthropic.Anthropic(api_key=anthropic_api_key)
            model_name = ""
            if model == "claude-haiku":
                model_name = "claude-3-haiku-20240307"
            elif model == "claude-sonnet":
                model_name = "claude-3-sonnet-20240229"
            elif model == "claude-3.7-sonnet":
                model_name = "claude-3-5-sonnet-20240620"
            elif model == "claude-opus":
                model_name = "claude-3-opus-20240229"
            
            response = client.messages.create(
                model=model_name,
                max_tokens=1000,
                temperature=0.2,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            return response.content[0].text
        elif model.startswith("gpt"):
            try:
                # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI —Å –º–∏–Ω–∏–º—É–º–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                client = openai.OpenAI(api_key=openai_api_key)
                model_name = "gpt-4o" if model == "gpt-4o" else "gpt-4o-mini"
                response = client.chat.completions.create(
                    model=model_name,
                    messages=[
                        {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.2,
                    max_tokens=1000
                )
                return response.choices[0].message.content
            except Exception as e:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                st.error(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è GPT –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {str(e)}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º legacy –º–µ—Ç–æ–¥ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
                openai.api_key = openai_api_key
                model_name = "gpt-4o" if model == "gpt-4o" else "gpt-4o-mini"
                response = openai.chat.completions.create(
                    model=model_name,
                    messages=[
                        {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.2,
                    max_tokens=1000
                )
                return response.choices[0].message.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

def generate_exercise(model="claude-haiku", max_attempts=3):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ LLM"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
    active_topics = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
    for tense in TENSES:
        if st.session_state.selected_topics.get(tense, False):
            active_topics.append(tense)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    for form in FORMS:
        if st.session_state.selected_topics.get(form, False):
            active_topics.append(form)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
    if st.session_state.selected_topics.get('Pronombres', False):
        active_topics.append('Pronombres (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä.)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–∞—Ä–∞—Ñ—Ä–∞–∑–∏—Å
    if st.session_state.selected_topics.get('Par√°frasis', False):
        active_topics.extend(CONSTRUCTIONS)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ç–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞
    if not active_topics:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–µ–º—ã, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
        active_topics = TENSES + FORMS + ['Pronombres (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä.)'] + CONSTRUCTIONS
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    selected_option = random.choice(active_topics)
    
    # –í—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≥–æ–ª –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º (60/40)
    selected_verb = None
    
    # –ï—Å–ª–∏ –æ–±–∞ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≥–æ–ª–æ–≤ –Ω–µ –ø—É—Å—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≥–æ–ª
    if VERBS_LIST_1 or VERBS_LIST_2:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –≤—Å–µ –≥–ª–∞–≥–æ–ª—ã –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
        if not set(VERBS_LIST_1) - set(st.session_state.verbs_session_1) and VERBS_LIST_1:
            st.session_state.verbs_session_1 = []
            
        if not set(VERBS_LIST_2) - set(st.session_state.verbs_session_2) and VERBS_LIST_2:
            st.session_state.verbs_session_2 = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
        available_verbs_1 = [v for v in VERBS_LIST_1 if v not in st.session_state.verbs_session_1]
        available_verbs_2 = [v for v in VERBS_LIST_2 if v not in st.session_state.verbs_session_2]
        
        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –ø—É—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–æ–π
        if not available_verbs_1 and available_verbs_2:
            verb_source = 2
        elif available_verbs_1 and not available_verbs_2:
            verb_source = 1
        else:
            # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            verb_source = 1 if random.random() < 0.6 else 2
        
        if verb_source == 1 and available_verbs_1:
            selected_verb = random.choice(available_verbs_1)
            st.session_state.verbs_session_1.append(selected_verb)
        elif verb_source == 2 and available_verbs_2:
            selected_verb = random.choice(available_verbs_2)
            st.session_state.verbs_session_2.append(selected_verb)
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    excluded_verbs = ", ".join([f'"{verb}"' for verb in st.session_state.used_verbs[-10:]])
    
    # –û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è Imperativo
    special_instructions = ""
    if selected_option == "Imperativo":
        special_instructions = """
        ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–û–ó–î–ê–í–ê–ô –ê–ë–°–û–õ–Æ–¢–ù–û –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ë–ï–ó –ö–ê–ö–ò–•-–õ–ò–ë–û –ü–û–í–¢–û–†–ï–ù–ò–ô! ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
        
        1Ô∏è‚É£ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. 
        –ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        
        2Ô∏è‚É£ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "Se√±or/Se√±ora + —Ñ–∞–º–∏–ª–∏—è" (–æ—Å–æ–±–µ–Ω–Ω–æ Mart√≠nez, Ram√≠rez, Garc√≠a) 
        –≤ –∫–∞–∂–¥–æ–º –∑–∞–¥–∞–Ω–∏–∏. –≠—Ç–æ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞!
        
        3Ô∏è‚É£ –í –ö–ê–ñ–î–û–ú –∑–∞–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ü–†–ò–ù–¶–ò–ü–ò–ê–õ–¨–ù–û –†–ê–ó–ù–´–ï –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.
        –ù–ï –ü–û–í–¢–û–†–Ø–ô —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.
        
        üîÑ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ê–†–¨–ò–†–£–ô –°–¢–†–£–ö–¢–£–†–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:
        - –ù–∞—á–∏–Ω–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É (–Ω–µ –≤—Å–µ–≥–¥–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è)
        - –ú–µ–Ω—è–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        - –°–º–µ—à–∏–≤–∞–π –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –ø–æ–±—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        - –ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–∫ –ø—Ä—è–º—ã–µ, —Ç–∞–∫ –∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—å–±—ã/–ø—Ä–∏–∫–∞–∑—ã
        
        üîΩ –í–´–ë–ò–†–ê–ô –ò–ó –û–ì–†–û–ú–ù–û–ì–û –†–ê–ó–ù–û–û–ë–†–ê–ó–ò–Ø –æ–±—Ä–∞—â–µ–Ω–∏–π üîΩ
        
        –î–õ–Ø –§–û–†–ú–´ T√ö (–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –µ–¥. —á–∏—Å–ª–æ):
        ‚Ä¢ –ò–º–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï –∫–∞–∂–¥—ã–π —Ä–∞–∑): 
          Javi, Miguel, Sara, Carmen, Luisa, Diego, Isabel, Roberto, Eva, Daniel, Natalia, Jorge, 
          Marina, Tom√°s, Luc√≠a, Alejandro, Cristina, Gabriel, Andrea, V√≠ctor, Julia, Alberto, 
          Beatriz, Ricardo, Teresa, Fernando, Pilar, Francisco, Rosa, Emilio, Laura
          
        ‚Ä¢ –†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Hijo, Hija, Hermano, Hermana, Primo, Prima, T√≠o, T√≠a, Abuelo, Abuela, Sobrino, 
          Sobrina, Nieto, Nieta, Cu√±ado, Cu√±ada, Padrino, Madrina
          
        ‚Ä¢ –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Cari√±o, Tesoro, Cielo, Amor, Guapo, Guapa, Chico, Chica, Joven, Peque√±o, Peque√±a, 
          Bonito, Bonita
          
        –î–õ–Ø –§–û–†–ú–´ USTED (—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –µ–¥. —á–∏—Å–ª–æ):
        ‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Doctor, Doctora, Profesor, Profesora, Ingeniero, Ingeniera, Arquitecto, Arquitecta, 
          Abogado, Abogada, Agente, Chef, Enfermero, Enfermera, Capit√°n, Sargento, Inspector, 
          Inspectora, Juez, Jueza, Conductor, Conductora, Piloto, Embajador, Embajadora
          
        ‚Ä¢ –¢–∏—Ç—É–ª—ã (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Don, Do√±a, Excelent√≠simo, Excelent√≠sima, Ilustr√≠simo, Ilustr√≠sima, Reverendo, 
          Reverenda, Alteza, Majestad, Presidente, Presidenta, Ministro, Ministra
          
        –î–õ–Ø –§–û–†–ú–´ VOSOTROS (–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –º–Ω. —á–∏—Å–ª–æ):
        ‚Ä¢ –ì—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Chicos, Chicas, Ni√±os, Ni√±as, Amigos, Amigas, J√≥venes, Compa√±eros, Compa√±eras, 
          Primos, Primas, Hermanos, Hermanas, Colegas, Chavales, Estudiantes, Muchachos, 
          Muchachas, Vecinos, Vecinas
          
        –î–õ–Ø –§–û–†–ú–´ USTEDES (—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –º–Ω. —á–∏—Å–ª–æ):
        ‚Ä¢ –ì—Ä—É–ø–ø—ã (–∏—Å–ø–æ–ª—å–∑—É–π –†–ê–ó–ù–´–ï): 
          Se√±ores, Se√±oras, Damas, Caballeros, Profesores, Profesoras, Doctores, Doctoras, 
          Ciudadanos, Ciudadanas, Pasajeros, Pasajeras, Distinguidos, Distinguidas, Estimados, 
          Estimadas, Respetables, Honorables, Visitantes, Delegados, Delegadas, Miembros
          
        üåü –ü–†–ò–ú–ï–†–´ –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–• –ö–û–ù–¢–ï–ö–°–¢–û–í (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è –∏–º–∏):
        
        ‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∏—â–∏, —É–±–æ—Ä–∫–∞, —Ä–µ–º–æ–Ω—Ç
        ‚Ä¢ –í –º–∞–≥–∞–∑–∏–Ω–µ: –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏, –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö
        ‚Ä¢ –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: –∑–∞–∫–∞–∑ –µ–¥—ã, –ø—Ä–æ—Å—å–±—ã –∫ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—É
        ‚Ä¢ –í —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ: –ø—Ä–æ—Å—å–±—ã –∫ –≤–æ–¥–∏—Ç–µ–ª—é, –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º
        ‚Ä¢ –í —à–∫–æ–ª–µ/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ: –∑–∞–¥–∞–Ω–∏—è –æ—Ç —É—á–∏—Ç–µ–ª—è
        ‚Ä¢ –ù–∞ —Ä–∞–±–æ—Ç–µ: —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–ª–µ–≥–∞–º, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        ‚Ä¢ –í –≥–æ—Ä–æ–¥–µ: –ø—Ä–æ—Å—å–±–∞ –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Ä–æ–≥—É, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        ‚Ä¢ –í —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö: –ø—Ä–æ—Å—å–±–∞ –æ –ø–æ–º–æ—â–∏, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        ‚Ä¢ –ù–∞ –æ—Ç–¥—ã—Ö–µ: —Å–æ–≤–µ—Ç—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≥–∏–¥–∞
        ‚Ä¢ –°–ø–æ—Ä—Ç: —É–∫–∞–∑–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞, –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã
        ‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ: —Å–æ–≤–µ—Ç—ã –≤—Ä–∞—á–∞, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ‚Ä¢ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        
        ‚ú≥Ô∏è –†–ê–ó–ù–û–û–ë–†–ê–ó–¨ –ì–õ–ê–ì–û–õ–´ - –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö, –≤–∫–ª—é—á–∞—è:
        ‚Ä¢ –¥–≤–∏–∂–µ–Ω–∏—è (andar, correr, saltar, subir, bajar, girar, etc.)
        ‚Ä¢ —Ä–µ—á–∏ (decir, hablar, explicar, contar, responder, preguntar, etc.)
        ‚Ä¢ –º—ã—à–ª–µ–Ω–∏—è (pensar, creer, imaginar, considerar, reflexionar, etc.)
        ‚Ä¢ —á—É–≤—Å—Ç–≤ (sentir, querer, amar, odiar, desear, esperar, etc.)
        ‚Ä¢ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ (comer, beber, dormir, despertar, ducharse, vestirse, etc.)
        ‚Ä¢ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ (escribir, dibujar, pintar, crear, dise√±ar, construir, etc.)
        
        üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –ó–ê–î–ê–ù–ò–Ø:
        1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –∏ –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è?
        2. –û–±—Ä–∞—â–µ–Ω–∏–µ –£–ù–ò–ö–ê–õ–¨–ù–û–ï –∏ –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è?
        3. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–û–í–´–ô –∏ –ò–ù–¢–ï–†–ï–°–ù–´–ô?
        4. –ì–ª–∞–≥–æ–ª –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π?
        
        –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç "–Ω–µ—Ç" - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ!
        """
    
    # –û—Å–æ–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω/—Ñ–æ—Ä–º
    elif selected_option in TENSES or selected_option in FORMS:
        special_instructions = """
        ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–û–ó–î–ê–í–ê–ô –ê–ë–°–û–õ–Æ–¢–ù–û –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ó–ê–î–ê–ù–ò–Ø –ë–ï–ó –ö–ê–ö–ò–•-–õ–ò–ë–û –ü–û–í–¢–û–†–ï–ù–ò–ô! ‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
        
        1Ô∏è‚É£ –ö–ê–¢–ï–ì–û–†–ò–ß–ï–°–ö–ò –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. 
        –ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç.
        
        2Ô∏è‚É£ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í–ê–†–¨–ò–†–£–ô –°–¢–†–£–ö–¢–£–†–£ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:
        - –ù–∞—á–∏–Ω–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É
        - –ú–µ–Ω—è–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—É—é –¥–ª–∏–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        - –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        
        3Ô∏è‚É£ –ò–°–ü–û–õ–¨–ó–£–ô –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ï –¢–ï–ú–´ –ò –ö–û–ù–¢–ï–ö–°–¢–´:
        ‚Ä¢ –ë—ã—Ç–æ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∏—â–∏, —É–±–æ—Ä–∫–∞, —Ä–µ–º–æ–Ω—Ç
        ‚Ä¢ –í –º–∞–≥–∞–∑–∏–Ω–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ, —à–∫–æ–ª–µ, –Ω–∞ —Ä–∞–±–æ—Ç–µ
        ‚Ä¢ –í –≥–æ—Ä–æ–¥–µ, –Ω–∞ –æ—Ç–¥—ã—Ö–µ, –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö, –≤ —Å–ø–æ—Ä—Ç–µ
        ‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏—Å–∫—É—Å—Å—Ç–≤–æ, –Ω–∞—É–∫–∞
        
        4Ô∏è‚É£ –†–ê–ó–ù–û–û–ë–†–ê–ó–¨ –ì–õ–ê–ì–û–õ–´ - –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö, –≤–∫–ª—é—á–∞—è:
        ‚Ä¢ –¥–≤–∏–∂–µ–Ω–∏—è (andar, correr, saltar, subir, bajar, girar, etc.)
        ‚Ä¢ —Ä–µ—á–∏ (decir, hablar, explicar, contar, responder, preguntar, etc.)
        ‚Ä¢ –º—ã—à–ª–µ–Ω–∏—è (pensar, creer, imaginar, considerar, reflexionar, etc.)
        ‚Ä¢ —á—É–≤—Å—Ç–≤ (sentir, querer, amar, odiar, desear, esperar, etc.)
        ‚Ä¢ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ (comer, beber, dormir, despertar, ducharse, vestirse, etc.)
        ‚Ä¢ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ (escribir, dibujar, pintar, crear, dise√±ar, construir, etc.)
        
        üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –ó–ê–î–ê–ù–ò–Ø:
        1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –∏ –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è?
        2. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–û–í–´–ô –∏ –ò–ù–¢–ï–†–ï–°–ù–´–ô?
        3. –ì–ª–∞–≥–æ–ª –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π?
        
        –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç "–Ω–µ—Ç" - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–µ–ª–∞–π –∑–∞–¥–∞–Ω–∏–µ!
        """
    
    # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –≥–ª–∞–≥–æ–ª
    for attempt in range(max_attempts):
        verb_instruction = ""
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        if "Pronombres" in selected_option:
            # –î–ª—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≥–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞
            selected_verb = None
            verb_instruction = ""
            prompt = f"""
            –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ (Castellano, –ò—Å–ø–∞–Ω–∏—è) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã—Ö, —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã—Ö, –ª–∏—á–Ω—ã—Ö –∏ –¥—Ä.).
            
            –í–ê–ñ–ù–û: –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ú–ï–°–¢–û–ò–ú–ï–ù–ò–Ø, –∞ –ù–ï –≥–ª–∞–≥–æ–ª–∞. –í–º–µ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–ª–∂–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ.
            –î–æ–±–∞–≤—å –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —á—ë—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è.
            
            {special_instructions}
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "sentence": "–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º",
                "incomplete_sentence": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∞ –º–µ—Å—Ç–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è",
                "verb_infinitive": "–æ—Å–Ω–æ–≤–Ω–æ–π –≥–ª–∞–≥–æ–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)",
                "tense": "Pronombres (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä.)",
                "correct_form": "–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –ú–ï–°–¢–û–ò–ú–ï–ù–ò–Ø, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ–ø—É—Å–∫–µ",
                "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ù–ê –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï, –ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
                "translation": "–ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "word_type": "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ",
                "base_word": "–±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è",
                "conjugation": {{}}
            }}
            
            –¢–∏–ø—ã –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
            1. –ü—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ (mi, tu, su, nuestro, vuestro, su)
            2. –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–µ (este, ese, aquel, esta, esa, aquella, etc.)
            3. –õ–∏—á–Ω—ã–µ (yo, t√∫, √©l, ella, nosotros, vosotros, ellos, ellas)
            4. –í–æ–∑–≤—Ä–∞—Ç–Ω—ã–µ (me, te, se, nos, os, se)
            5. –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ (qu√©, qui√©n, cu√°l, etc.)
            6. –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ (alguien, algo, cualquiera, etc.)
            7. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ (nada, nadie, ninguno, etc.)
            
            –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞.
            –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö/–ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö –∏–∑—É—á–∞—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫.
            """
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
            if selected_verb:
                verb_instruction = f'–í–ê–ñ–ù–û: –í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –≥–ª–∞–≥–æ–ª "{selected_verb}".'
            else:
                verb_instruction = f"""
                –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã! –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã: {excluded_verbs}.
                –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π, –º–µ–Ω–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π –≥–ª–∞–≥–æ–ª. –°—Ç–∞—Ä–∞–π—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–∞–≥–æ–ª—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø 
                (–¥–≤–∏–∂–µ–Ω–∏–µ, –≥–æ–≤–æ—Ä–µ–Ω–∏–µ, —á—É–≤—Å—Ç–≤–∞, –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ç.–¥.).
                """
            
            prompt = f"""
            –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ (Castellano, –ò—Å–ø–∞–Ω–∏—è) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–ª–∞–≥–æ–ª–∞ –≤ —Ñ–æ—Ä–º–µ "{selected_option}".
            
            {verb_instruction}
            
            –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞ –ø–æ–¥—Ö–æ–¥–∏–ª –ª–∏—à—å –æ–¥–∏–Ω –≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã.
            –î–æ–±–∞–≤—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —á—ë—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ–π –≤–∏–¥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã.
            
            {special_instructions}
            
            –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
            1. –û–±—ä—è—Å–Ω–µ–Ω–∏–µ (explanation) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            2. –ü–µ—Ä–µ–≤–æ–¥ (translation) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
            {{
                "sentence": "–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º",
                "incomplete_sentence": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∞ –º–µ—Å—Ç–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞",
                "verb_infinitive": "–≥–ª–∞–≥–æ–ª –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ",
                "tense": "{selected_option}",
                "correct_form": "–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ–ø—É—Å–∫–µ",
                "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞ —Ñ–æ—Ä–º–∞",
                "translation": "–ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
                "word_type": "—Ç–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–≥–ª–∞–≥–æ–ª, –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ, –∞—Ä—Ç–∏–∫–ª—å, –ø—Ä–µ–¥–ª–æ–≥ –∏ —Ç.–¥.)",
                "base_word": "–±–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤ –∏–ª–∏ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂ –¥–ª—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π)",
                "conjugation": {{
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é —Å–ø—Ä—è–∂–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
            if selected_option == "Imperativo":
                prompt += """
                    "t√∫": "—Ñ–æ—Ä–º–∞ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞ –¥–ª—è t√∫",
                    "usted": "—Ñ–æ—Ä–º–∞ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞ –¥–ª—è usted",
                    "vosotros": "—Ñ–æ—Ä–º–∞ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞ –¥–ª—è vosotros/as",
                    "ustedes": "—Ñ–æ—Ä–º–∞ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞ –¥–ª—è ustedes"
                }}
                """
            elif selected_option in TENSES:
                prompt += """
                    "yo": "—Ñ–æ—Ä–º–∞ –¥–ª—è yo –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "t√∫": "—Ñ–æ—Ä–º–∞ –¥–ª—è t√∫ –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "√©l": "—Ñ–æ—Ä–º–∞ –¥–ª—è √©l/ella/usted –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "nosotros": "—Ñ–æ—Ä–º–∞ –¥–ª—è nosotros/as –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "vosotros": "—Ñ–æ—Ä–º–∞ –¥–ª—è vosotros/as –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "ellos": "—Ñ–æ—Ä–º–∞ –¥–ª—è ellos/ellas/ustedes –≤ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
                }}
                """
            elif selected_option in FORMS:
                # –î–ª—è Participio –∏ Gerundio –Ω–µ—Ç —Å–ø—Ä—è–∂–µ–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                prompt += """
                    "form": "–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ (participio/gerundio)"
                }}
                """
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º –≤—Ä–µ–º–µ–Ω–∏
                prompt += """
                    "yo": "—Ñ–æ—Ä–º–∞ –¥–ª—è yo –≤ Presente de Indicativo",
                    "t√∫": "—Ñ–æ—Ä–º–∞ –¥–ª—è t√∫ –≤ Presente de Indicativo",
                    "√©l": "—Ñ–æ—Ä–º–∞ –¥–ª—è √©l/ella/usted –≤ Presente de Indicativo",
                    "nosotros": "—Ñ–æ—Ä–º–∞ –¥–ª—è nosotros/as –≤ Presente de Indicativo",
                    "vosotros": "—Ñ–æ—Ä–º–∞ –¥–ª—è vosotros/as –≤ Presente de Indicativo",
                    "ellos": "—Ñ–æ—Ä–º–∞ –¥–ª—è ellos/ellas/ustedes –≤ Presente de Indicativo"
                }}
                """
            
            prompt += f"""
            }}
            
            –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞.
            –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö/–ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö –∏–∑—É—á–∞—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫.
            """
        
        response = get_llm_response(prompt, model)
        if response:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                json_start = response.find('{')
                json_end = response.rfind('}') + 1
                json_str = response[json_start:json_end]
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∫–æ–ø–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                original_json = json_str
                
                # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è JSON
                # 1. –ó–∞–º–µ–Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
                json_str = json_str.replace("'", '"')
                
                # 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª–µ–º
                json_str = json_str.replace('"\n', '",\n')
                json_str = json_str.replace('"\r\n', '",\r\n')
                
                # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª–µ–º (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞)
                json_str = json_str.replace('" ', '", ')
                
                # 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–µ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ JSON
                json_str = json_str.replace('}}"', '}}')
                json_str = json_str.replace('""', '"')
                
                # 5. –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ –∫–æ–Ω—Ü–µ
                if json_str.endswith('"'):
                    if json_str[-2] != '}':
                        json_str = json_str[:-1]
                
                # 6. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ JSON –æ–±—ä–µ–∫—Ç–∞—Ö
                # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                json_str = re.sub(r',(\s*)}', r'\1}', json_str)
                
                # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–µ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
                # –Ω–∞–ø—Ä–∏–º–µ—Ä: "field1": "value1" "field2": "value2"
                json_str = re.sub(r'("(?:[^"\\]|\\.)*")\s+("(?:[^"\\]|\\.)*")', r'\1, \2', json_str)
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –º—ã –≤—Å–µ –µ—â–µ –Ω–µ –º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, 
                # –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
                try:
                    exercise = json.loads(json_str)
                except Exception as json_parse_error:
                    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    # st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON: {str(json_parse_error)}")
                    # st.write("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π JSON:", original_json)
                    # st.write("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π JSON:", json_str)
                    
                    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é regex
                        exercise = {}
                        
                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π —Å –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç—å—é
                        # –≠—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∫–∞–≤—ã—á–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏ —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
                        patterns = {
                            "sentence": r'["\']sentence["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "incomplete_sentence": r'["\']incomplete_sentence["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "verb_infinitive": r'["\']verb_infinitive["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "tense": r'["\']tense["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "correct_form": r'["\']correct_form["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "explanation": r'["\']explanation["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "translation": r'["\']translation["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "word_type": r'["\']word_type["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "base_word": r'["\']base_word["\'][\s]*:[\s]*["\']([^"\']+)["\']'
                        }
                        
                        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                        for field, pattern in patterns.items():
                            match = re.search(pattern, response, re.IGNORECASE)
                            if match:
                                exercise[field] = match.group(1)
                            else:
                                # –ü–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
                                alt_pattern = f'["\']?{field}["\']?\\s*:\\s*["\']?([^,"\'}}]+)["\']?'
                                match = re.search(alt_pattern, response, re.IGNORECASE)
                                if match:
                                    exercise[field] = match.group(1).strip()
                                else:
                                    # –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                    if field == "word_type":
                                        exercise[field] = "–≥–ª–∞–≥–æ–ª"
                                    elif field == "base_word" and "verb_infinitive" in exercise:
                                        exercise[field] = exercise["verb_infinitive"]
                                    elif field == "tense" and selected_option:
                                        exercise[field] = selected_option
                                    else:
                                        exercise[field] = ""
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–ø—Ä—è–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        exercise["conjugation"] = {}
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ñ–æ—Ä–º—ã —Å–ø—Ä—è–∂–µ–Ω–∏—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                        conjugation_patterns = {
                            "yo": r'["\']yo["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "t√∫": r'["\']t√∫["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "√©l": r'["\'](√©l|el)["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "nosotros": r'["\']nosotros["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "vosotros": r'["\']vosotros["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "ellos": r'["\']ellos["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "form": r'["\']form["\'][\s]*:[\s]*["\']([^"\']+)["\']'
                        }
                        
                        for form, pattern in conjugation_patterns.items():
                            match = re.search(pattern, response, re.IGNORECASE)
                            if match:
                                if form == "√©l" and len(match.groups()) > 1:
                                    exercise["conjugation"][form] = match.group(2)  # –í —ç—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω–µ –¥–≤–∞ –∑–∞—Ö–≤–∞—Ç–∞
                                else:
                                    exercise["conjugation"][form] = match.group(1)
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Imperativo
                        imperativo_patterns = {
                            "usted": r'["\']usted["\'][\s]*:[\s]*["\']([^"\']+)["\']',
                            "ustedes": r'["\']ustedes["\'][\s]*:[\s]*["\']([^"\']+)["\']'
                        }
                        
                        if "Imperativo" in response:
                            for form, pattern in imperativo_patterns.items():
                                match = re.search(pattern, response, re.IGNORECASE)
                                if match:
                                    exercise["conjugation"][form] = match.group(1)
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç —Å–ø—Ä—è–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        exercise["conjugation"] = {}
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                        required_fields = ["sentence", "incomplete_sentence", "verb_infinitive", "correct_form"]
                        missing_fields = [field for field in required_fields if not exercise.get(field)]
                        
                        if not missing_fields:
                            # –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞–π–¥–µ–Ω—ã
                            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–±—Ä–∞–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            pass
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö
                            if "sentence" in missing_fields and "incomplete_sentence" in exercise and "correct_form" in exercise:
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ + –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã
                                exercise["sentence"] = exercise["incomplete_sentence"].replace("...", exercise["correct_form"])
                            
                            if "incomplete_sentence" in missing_fields and "sentence" in exercise and "correct_form" in exercise:
                                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ, –∑–∞–º–µ–Ω—è—è –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É –Ω–∞ ...
                                exercise["incomplete_sentence"] = exercise["sentence"].replace(exercise["correct_form"], "...")
                            
                            # –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                            missing_fields = [field for field in ["sentence", "incomplete_sentence"] if not exercise.get(field)]
                            
                            if "verb_infinitive" in missing_fields:
                                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≥–ª–∞–≥–æ–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                                exercise["verb_infinitive"] = "usar"  # –ë–∞–∑–æ–≤—ã–π –≥–ª–∞–≥–æ–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏
                            
                            if "correct_form" in missing_fields:
                                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                # –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ª—É—á—à–µ, —á–µ–º –Ω–∏—á–µ–≥–æ
                                form_matches = re.findall(r'["\']([^"\']+)["\'][\s]*(?:es la forma correcta|should be used|es la respuesta correcta)', response)
                                if form_matches:
                                    exercise["correct_form"] = form_matches[0]
                            
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
                            if not exercise.get("sentence") or not exercise.get("incomplete_sentence"):
                                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_fields)}")
                            
                            # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            pass
                        
                    except Exception as regex_error:
                        # –ï—Å–ª–∏ –¥–∞–∂–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞: {str(regex_error)}")
                        # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        # st.write("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:", response[:500] + ("..." if len(response) > 500 else ""))
                        if attempt == max_attempts - 1:
                            return None
                        continue
                
                # –ï—Å–ª–∏ –≥–ª–∞–≥–æ–ª –±—ã–ª –≤—ã–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞, —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                if selected_verb and exercise['verb_infinitive'] != selected_verb:
                    if attempt < max_attempts - 1:
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –≥–ª–∞–≥–æ–ª –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                if exercise['verb_infinitive'] not in st.session_state.used_verbs:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≥–æ–ª –≤ –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
                    st.session_state.used_verbs.append(exercise['verb_infinitive'])
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ 20 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –≥–ª–∞–≥–æ–ª–∞–º–∏
                    if len(st.session_state.used_verbs) > 20:
                        st.session_state.used_verbs = st.session_state.used_verbs[-20:]
                    return exercise
                elif attempt == max_attempts - 1:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –≥–ª–∞–≥–æ–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
                    return exercise
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                if attempt == max_attempts - 1:
                    return None
    return None

def check_answer(user_input, correct_answer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–æ–≤ –∏ √±"""
    if not user_input or not correct_answer:
        return False
        
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    user_norm = normalize_spanish_text(user_input.strip().lower())
    correct_norm = normalize_spanish_text(correct_answer.strip().lower())
    
    return user_norm == correct_norm

def generate_audio(text, voice_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Elevenlabs API –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ requests"""
    try:
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": elevenlabs_api_key
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            return response.content
        else:
            st.error(f"–û—à–∏–±–∫–∞ API ElevenLabs: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

def autoplay_audio(audio_data):
    """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞—É–¥–∏–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –ø–æ–º–æ—â—å—é HTML-—ç–ª–µ–º–µ–Ω—Ç–∞ audio"""
    b64 = base64.b64encode(audio_data).decode()
    md = f"""
        <audio autoplay controls>
            <source src="data:audio/mp3;base64,{b64}" type="audio/mp3">
        </audio>
        """
    st.markdown(md, unsafe_allow_html=True)

def toggle_settings():
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.session_state.show_settings = not st.session_state.show_settings

def apply_settings_and_generate():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    st.session_state.show_settings = False
    st.session_state.needs_new_exercise = True

def next_exercise_callback():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–î–∞–ª–µ–µ'"""
    st.session_state.needs_new_exercise = True
    # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é
    st.session_state.user_answer = ""

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ñ–ª–∞–≥–µ needs_new_exercise
if not st.session_state.current_exercise or st.session_state.needs_new_exercise:
    st.session_state.needs_new_exercise = False
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ..."):
        st.session_state.current_exercise = generate_exercise(st.session_state.selected_model)
        st.session_state.user_answer = ""
        st.session_state.submitted = False
        st.session_state.correct = None
        st.session_state.show_translation = False
        st.session_state.audio_ready = False
        st.session_state.audio_data = None

# –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
if st.session_state.current_exercise:
    exercise = st.session_state.current_exercise
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    word_type = exercise.get('word_type', '–≥–ª–∞–≥–æ–ª')
    base_word = exercise.get('base_word', exercise['verb_infinitive'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    if (word_type == "–≥–ª–∞–≥–æ–ª" or word_type == "verbo" or word_type.lower() == "verb" or 
        word_type == "–≥–ª–∞–≥–æ–ª –≤ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ"):
        instruction_header = f"### –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –≥–ª–∞–≥–æ–ª <span style='color:red; font-weight:700;'>{base_word.upper()}</span> –≤ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ"
    elif (word_type == "–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ" or word_type == "pronombre" or 
          word_type.lower() == "pronoun" or "Pronombres" in exercise.get('tense', '')):
        # –î–ª—è –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–ª–æ–≤
        instruction_header = f"### –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ"
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≥–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        instruction_header = f"### –í—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –≥–ª–∞–≥–æ–ª <span style='color:red; font-weight:700;'>{base_word.upper()}</span> –≤ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞–Ω–∏—è
    st.markdown(instruction_header, unsafe_allow_html=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
    if st.session_state.submitted:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
        complete_sentence = exercise['incomplete_sentence'].replace('...', f'**{exercise["correct_form"]}**')
        st.markdown(f"**{complete_sentence}**")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–æ–ø—É—Å–∫–æ–º
        st.markdown(f"**{exercise['incomplete_sentence']}**")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    user_input = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:",
        value="" if st.session_state.needs_new_exercise else st.session_state.user_answer,
        key="answer_input",
        disabled=st.session_state.submitted
    )
    
    # –ö–Ω–æ–ø–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        check_button = st.button(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            disabled=st.session_state.submitted,
            use_container_width=True
        )
    
    with col2:
        translate_button = st.button(
            "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
            use_container_width=True
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if check_button:
        st.session_state.user_answer = user_input
        st.session_state.submitted = True
        st.session_state.correct = check_answer(user_input, exercise['correct_form'])
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∞—É–¥–∏–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ
        st.session_state.audio_ready = False
        st.session_state.audio_data = None
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # st.rerun()  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if st.session_state.submitted:
        if st.session_state.correct:
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: **{exercise['correct_form']}**")
            st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {exercise['explanation']}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if translate_button:
        st.session_state.show_translation = True
    
    if st.session_state.show_translation:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ñ–æ—Ä–º—É
        st.info(f"""
        **–ü–µ—Ä–µ–≤–æ–¥:** {exercise['translation']}
        
        **–§–æ—Ä–º–∞:** {exercise['tense']}
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ
        explanation = exercise.get('explanation', '')
        if explanation and any(word in explanation.lower() for word in ['se utiliza', 'porque', 'para', 'cuando', 'como', 'el pronombre']):
            # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º - –¥–æ–±–∞–≤–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            st.warning(f"**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ: {explanation}")
            # –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∑–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥, –Ω–æ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ –±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ API
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø—Ä—è–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
        try:
            conjugation = exercise.get('conjugation', {})
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º html_table —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            html_table = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è 
            if ("Pronombres" not in exercise.get('tense', '') and 
                word_type not in ["–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ", "pronombre", "pronoun"]):
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏/—Ñ–æ—Ä–º—ã
                if exercise['tense'] == "Imperativo":
                    table_title = f"–°–ø—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∞ {exercise['verb_infinitive']} (Imperativo):"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è conjugation –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    tu_form = conjugation.get('t√∫', '-')
                    usted_form = conjugation.get('usted', '-')
                    vosotros_form = conjugation.get('vosotros', '-')
                    ustedes_form = conjugation.get('ustedes', '-')
                    
                    # –ï—Å–ª–∏ –≤—Å–µ —Ñ–æ—Ä–º—ã –ø—É—Å—Ç—ã–µ, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ö
                    if tu_form == '-' and usted_form == '-' and vosotros_form == '-' and ustedes_form == '-':
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤—É –≥–ª–∞–≥–æ–ª–∞
                        verb = exercise['verb_infinitive']
                        ending = verb[-2:] if len(verb) > 2 else ""
                        stem = verb[:-2] if len(verb) > 2 else verb
                        
                        # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è
                        if ending == "ar":
                            tu_form = f"{stem}a"
                            usted_form = f"{stem}e"
                            vosotros_form = f"{stem}ad"
                            ustedes_form = f"{stem}en"
                        elif ending in ["er", "ir"]:
                            tu_form = f"{stem}e"
                            usted_form = f"{stem}a"
                            vosotros_form = f"{stem}{ending[0]}d"
                            ustedes_form = f"{stem}an"
                    
                    html_table = f"""
                    <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                        <h4 style="margin-top: 0;">{table_title}</h4>
                        <table style="width: 100%; border-collapse: collapse;">
                            <tr>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>t√∫</strong></td>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;">{tu_form}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>usted</strong></td>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;">{usted_form}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>vosotros/as</strong></td>
                                <td style="padding: 8px; border-bottom: 1px solid #ddd;">{vosotros_form}</td>
                            </tr>
                            <tr>
                                <td style="padding: 8px;"><strong>ustedes</strong></td>
                                <td style="padding: 8px;">{ustedes_form}</td>
                            </tr>
                        </table>
                    </div>
                    """
                elif exercise['tense'] in FORMS:
                    if 'form' in conjugation:
                        html_table = f"""
                        <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                            <h4 style="margin-top: 0;">–§–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞ {exercise['verb_infinitive']} ({exercise['tense']}):</h4>
                            <p style="font-size: 16px; padding: 8px;">{conjugation.get('form', '-')}</p>
                        </div>
                        """
                    else:
                        html_table = f"""
                        <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                            <h4 style="margin-top: 0;">–§–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞ {exercise['verb_infinitive']} ({exercise['tense']}):</h4>
                            <p style="font-size: 16px; padding: 8px;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</p>
                        </div>
                        """
                else:
                    table_title = f"–°–ø—Ä—è–∂–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–∞ {exercise['verb_infinitive']} ({exercise['tense']}):"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å–ø—Ä—è–∂–µ–Ω–∏—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    if conjugation and any(conjugation.values()):
                        html_table = f"""
                        <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                            <h4 style="margin-top: 0;">{table_title}</h4>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>yo</strong></td>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{conjugation.get('yo', '-')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>t√∫</strong></td>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{conjugation.get('t√∫', '-')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>√©l/ella/usted</strong></td>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{conjugation.get('√©l', '-')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>nosotros/as</strong></td>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{conjugation.get('nosotros', '-')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>vosotros/as</strong></td>
                                    <td style="padding: 8px; border-bottom: 1px solid #ddd;">{conjugation.get('vosotros', '-')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px;"><strong>ellos/ellas/ustedes</strong></td>
                                    <td style="padding: 8px;">{conjugation.get('ellos', '-')}</td>
                                </tr>
                            </table>
                        </div>
                        """
                    else:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å —Ñ–æ—Ä–º–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã
                        verb = exercise['verb_infinitive']
                        ending = verb[-2:] if len(verb) > 2 else ""
                        stem = verb[:-2] if len(verb) > 2 else verb
                        
                        if exercise['tense'] == "Presente":
                            # –†–∞–∑–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–ª–∞–≥–æ–ª–∞
                            if ending == "ar":
                                forms = {
                                    "yo": f"{stem}o",
                                    "t√∫": f"{stem}as",
                                    "√©l": f"{stem}a",
                                    "nosotros": f"{stem}amos",
                                    "vosotros": f"{stem}√°is",
                                    "ellos": f"{stem}an"
                                }
                            elif ending == "er":
                                forms = {
                                    "yo": f"{stem}o",
                                    "t√∫": f"{stem}es",
                                    "√©l": f"{stem}e",
                                    "nosotros": f"{stem}emos",
                                    "vosotros": f"{stem}√©is",
                                    "ellos": f"{stem}en"
                                }
                            elif ending == "ir":
                                forms = {
                                    "yo": f"{stem}o",
                                    "t√∫": f"{stem}es",
                                    "√©l": f"{stem}e",
                                    "nosotros": f"{stem}imos",
                                    "vosotros": f"{stem}√≠s",
                                    "ellos": f"{stem}en"
                                }
                            else:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≥–ª–∞–≥–æ–ª–∞
                                forms = {
                                    "yo": "-",
                                    "t√∫": "-",
                                    "√©l": "-",
                                    "nosotros": "-",
                                    "vosotros": "-",
                                    "ellos": "-"
                                }
                        elif exercise['tense'] == "Imperativo":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–∫–ª–æ–Ω–µ–Ω–∏—è
                            if ending == "ar":
                                forms = {
                                    "t√∫": f"{stem}a",
                                    "√©l": f"{stem}e",
                                    "nosotros": f"{stem}emos",
                                    "vosotros": f"{stem}ad",
                                    "ellos": f"{stem}en"
                                }
                            elif ending in ["er", "ir"]:
                                forms = {
                                    "t√∫": f"{stem}e",
                                    "√©l": f"{stem}a",
                                    "nosotros": f"{stem}amos",
                                    "vosotros": f"{stem}{ending[0]}d",
                                    "ellos": f"{stem}an"
                                }
                            else:
                                forms = {
                                    "t√∫": "-",
                                    "√©l": "-",
                                    "nosotros": "-",
                                    "vosotros": "-",
                                    "ellos": "-"
                                }
                        elif exercise['tense'] == "Pret√©rito indefinido (perfecto simple)":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                            if ending == "ar":
                                forms = {
                                    "yo": f"{stem}√©",
                                    "t√∫": f"{stem}aste",
                                    "√©l": f"{stem}√≥",
                                    "nosotros": f"{stem}amos",
                                    "vosotros": f"{stem}asteis",
                                    "ellos": f"{stem}aron"
                                }
                            elif ending in ["er", "ir"]:
                                forms = {
                                    "yo": f"{stem}√≠",
                                    "t√∫": f"{stem}iste",
                                    "√©l": f"{stem}i√≥",
                                    "nosotros": f"{stem}imos",
                                    "vosotros": f"{stem}isteis",
                                    "ellos": f"{stem}ieron"
                                }
                            else:
                                forms = {
                                    "yo": "-",
                                    "t√∫": "-",
                                    "√©l": "-",
                                    "nosotros": "-",
                                    "vosotros": "-",
                                    "ellos": "-"
                                }
                        elif exercise['tense'] == "Pret√©rito imperfecto":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–µ—Ä—Ñ–µ–∫—Ç–∞
                            if ending == "ar":
                                forms = {
                                    "yo": f"{stem}aba",
                                    "t√∫": f"{stem}abas",
                                    "√©l": f"{stem}aba",
                                    "nosotros": f"{stem}√°bamos",
                                    "vosotros": f"{stem}abais",
                                    "ellos": f"{stem}aban"
                                }
                            elif ending in ["er", "ir"]:
                                forms = {
                                    "yo": f"{stem}√≠a",
                                    "t√∫": f"{stem}√≠as",
                                    "√©l": f"{stem}√≠a",
                                    "nosotros": f"{stem}√≠amos",
                                    "vosotros": f"{stem}√≠ais",
                                    "ellos": f"{stem}√≠an"
                                }
                            else:
                                forms = {
                                    "yo": "-",
                                    "t√∫": "-",
                                    "√©l": "-",
                                    "nosotros": "-",
                                    "vosotros": "-",
                                    "ellos": "-"
                                }
                        elif exercise['tense'] == "Futuro simple":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                            # Futuro –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤—É
                            forms = {
                                "yo": f"{verb}√©",
                                "t√∫": f"{verb}√°s",
                                "√©l": f"{verb}√°",
                                "nosotros": f"{verb}emos",
                                "vosotros": f"{verb}√©is",
                                "ellos": f"{verb}√°n"
                            }
                        elif exercise['tense'] == "Pret√©rito perfecto compuesto":
                            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Pret√©rito perfecto compuesto: haber en presente + participio
                            if ending == "ar":
                                participio = f"{stem}ado"
                            elif ending in ["er", "ir"]:
                                participio = f"{stem}ido"
                            else:
                                participio = "-"
                                
                            forms = {
                                "yo": f"he {participio}",
                                "t√∫": f"has {participio}",
                                "√©l": f"ha {participio}",
                                "nosotros": f"hemos {participio}",
                                "vosotros": f"hab√©is {participio}",
                                "ellos": f"han {participio}"
                            }
                        elif exercise['tense'] == "Futuro compuesto":
                            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Futuro compuesto: haber en futuro + participio
                            if ending == "ar":
                                participio = f"{stem}ado"
                            elif ending in ["er", "ir"]:
                                participio = f"{stem}ido"
                            else:
                                participio = "-"
                                
                            forms = {
                                "yo": f"habr√© {participio}",
                                "t√∫": f"habr√°s {participio}",
                                "√©l": f"habr√° {participio}",
                                "nosotros": f"habremos {participio}",
                                "vosotros": f"habr√©is {participio}",
                                "ellos": f"habr√°n {participio}"
                            }
                        elif exercise['tense'] == "Gerundio":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–µ—Ä—É–Ω–¥–∏—è
                            if ending == "ar":
                                forms = {"form": f"{stem}ando"}
                            elif ending in ["er", "ir"]:
                                forms = {"form": f"{stem}iendo"}
                            else:
                                forms = {"form": "-"}
                        elif exercise['tense'] == "Participio":
                            # –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏—á–∞—Å—Ç–∏—è
                            if ending == "ar":
                                forms = {"form": f"{stem}ado"}
                            elif ending in ["er", "ir"]:
                                forms = {"form": f"{stem}ido"}
                            else:
                                forms = {"form": "-"}
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤—Ä–µ–º–µ–Ω –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
                            forms = {
                                "yo": "-",
                                "t√∫": "-",
                                "√©l": "-",
                                "nosotros": "-",
                                "vosotros": "-",
                                "ellos": "-"
                            }
                            
                        # –°–æ–∑–¥–∞–µ–º HTML-—Ç–∞–±–ª–∏—Ü—É –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
                        if 'form' in forms:
                            # –î–ª—è Gerundio –∏ Participio
                            html_table = f"""
                            <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                                <h4 style="margin-top: 0;">–§–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞ {exercise['verb_infinitive']} ({exercise['tense']}):</h4>
                                <p style="font-size: 16px; padding: 8px;">{forms.get('form', '-')}</p>
                            </div>
                            """
                        elif exercise['tense'] == "Imperativo":
                            # –î–ª—è Imperativo
                            html_table = f"""
                            <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                                <h4 style="margin-top: 0;">{table_title}</h4>
                                <table style="width: 100%; border-collapse: collapse;">
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>t√∫</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('t√∫', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>usted</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('√©l', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>vosotros/as</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('vosotros', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px;"><strong>ustedes</strong></td>
                                        <td style="padding: 8px;">{forms.get('ellos', '-')}</td>
                                    </tr>
                                </table>
                            </div>
                            """
                        else:
                            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—Ä–µ–º—ë–Ω
                            html_table = f"""
                            <div style="padding: 10px; background-color: #f0f2f6; border-radius: 5px; margin-top: 10px; margin-bottom: 20px;">
                                <h4 style="margin-top: 0;">{table_title}</h4>
                                <table style="width: 100%; border-collapse: collapse;">
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>yo</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('yo', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>t√∫</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('t√∫', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>√©l/ella/usted</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('√©l', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>nosotros/as</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('nosotros', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;"><strong>vosotros/as</strong></td>
                                        <td style="padding: 8px; border-bottom: 1px solid #ddd;">{forms.get('vosotros', '-')}</td>
                                    </tr>
                                    <tr>
                                        <td style="padding: 8px;"><strong>ellos/ellas/ustedes</strong></td>
                                        <td style="padding: 8px;">{forms.get('ellos', '-')}</td>
                                    </tr>
                                </table>
                            </div>
                            """
                
                st.markdown(html_table, unsafe_allow_html=True)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø—Ä—è–∂–µ–Ω–∏–π: {str(e)}")
    
    # –ö–Ω–æ–ø–∫–∏ "–û–∑–≤—É—á–∏—Ç—å" –∏ "–î–∞–ª–µ–µ"
    col3, col4 = st.columns(2)
    
    with col3:
        if st.session_state.submitted:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            audio_button = st.button(
                "üîä –û–∑–≤—É—á–∏—Ç—å",
                use_container_width=True
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
            if audio_button:
                with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ..."):
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
                        sentence_to_speak = exercise['sentence']
                        audio_data = generate_audio(
                            sentence_to_speak,
                            st.session_state.voice_id
                        )
                        if audio_data:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            st.session_state.audio_data = audio_data
                            st.session_state.audio_ready = True
                            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞—É–¥–∏–æ —Å –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
                            autoplay_audio(audio_data)
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
            
            # –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –±–µ–∑ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            elif st.session_state.audio_ready and st.session_state.audio_data:
                st.audio(st.session_state.audio_data, format="audio/mpeg")

        with col4:
            next_button = st.button(
                "–î–∞–ª–µ–µ ‚û°Ô∏è",
                use_container_width=True,
                on_click=next_exercise_callback
            )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
else:
    if not st.session_state.show_settings:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", key="retry_btn", on_click=next_exercise_callback)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.markdown("---")
settings_button = st.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", on_click=toggle_settings)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É)
if st.session_state.show_settings:
    st.markdown('<div class="settings-section">', unsafe_allow_html=True)
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    
    # –í—Ä–µ–º–µ–Ω–∞ (Tenses)
    col_tenses1, col_tenses2 = st.columns(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –≥–∞–ª–æ—á–µ–∫
    select_all = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ", value=True, key="select_all")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö —á–µ–∫–±–æ–∫—Å–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ select_all
    if select_all:
        for tense in TENSES + FORMS + ['Pronombres', 'Par√°frasis']:
            st.session_state.selected_topics[tense] = True
    else:
        for tense in TENSES + FORMS + ['Pronombres', 'Par√°frasis']:
            st.session_state.selected_topics[tense] = False
    
    with col_tenses1:
        for tense in TENSES[:len(TENSES)//2 + len(TENSES)%2]:
            st.session_state.selected_topics[tense] = st.checkbox(
                tense, 
                value=st.session_state.selected_topics.get(tense, True),
                key=f"check_{tense}"
            )
    with col_tenses2:
        for tense in TENSES[len(TENSES)//2 + len(TENSES)%2:]:
            st.session_state.selected_topics[tense] = st.checkbox(
                tense, 
                value=st.session_state.selected_topics.get(tense, True),
                key=f"check_{tense}"
            )
    
    # –§–æ—Ä–º—ã (Forms)
    col_forms1, col_forms2 = st.columns(2)
    with col_forms1:
        st.session_state.selected_topics['Participio'] = st.checkbox(
            'Participio',
            value=st.session_state.selected_topics.get('Participio', True),
            key="check_Participio"
        )
    with col_forms2:
        st.session_state.selected_topics['Gerundio'] = st.checkbox(
            'Gerundio',
            value=st.session_state.selected_topics.get('Gerundio', True),
            key="check_Gerundio"
        )
    
    # –î—Ä—É–≥–æ–µ
    col_other1, col_other2 = st.columns(2)
    with col_other1:
        st.session_state.selected_topics['Pronombres'] = st.checkbox(
            'Pronombres (–º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è)',
            value=st.session_state.selected_topics.get('Pronombres', True),
            key="check_Pronouns"
        )
    with col_other2:
        st.session_state.selected_topics['Par√°frasis'] = st.checkbox(
            'Par√°frasis (–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)',
            value=st.session_state.selected_topics.get('Par√°frasis', True),
            key="check_Paraphrasis"
        )
    
    st.markdown("---")
    
    # –í—ã–±–æ—Ä LLM –º–æ–¥–µ–ª–∏
    model_option = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ LLM –º–æ–¥–µ–ª—å:",
        options=["claude-haiku", "claude-3.7-sonnet", "claude-opus", "gpt-4o", "gpt-4o-mini"],
        index=["claude-haiku", "claude-3.7-sonnet", "claude-opus", "gpt-4o", "gpt-4o-mini"].index(st.session_state.selected_model),
        format_func=lambda x: {
            "claude-haiku": "Claude 3 Haiku", 
            "claude-3.7-sonnet": "Claude 3.7 Sonnet", 
            "claude-opus": "Claude 3 Opus", 
            "gpt-4o": "GPT-4o", 
            "gpt-4o-mini": "GPT-4o mini"
        }[x],
        horizontal=True
    )
    if model_option != st.session_state.selected_model:
        st.session_state.selected_model = model_option
    
    # –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
    voice_option = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:",
        options=["Jhenny Antiques", "Benjamin"],
        index=0 if st.session_state.selected_voice == "Jhenny Antiques" else 1,
        horizontal=True
    )
    if voice_option != st.session_state.selected_voice:
        st.session_state.selected_voice = voice_option
    
    # –ö–∞—Ä—Ç–∞ ID –≥–æ–ª–æ—Å–æ–≤ Elevenlabs
    voice_id_map = {
        "Jhenny Antiques": "2Lb1en5ujrODDIqmp7F3",
        "Benjamin": "LruHrtVF6PSyGItzMNHS"
    }
    st.session_state.voice_id = voice_id_map[st.session_state.selected_voice]

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    st.button(
        "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", 
        use_container_width=True, 
        on_click=apply_settings_and_generate,
        key="apply_settings"
    )
    
    st.markdown('</div>', unsafe_allow_html=True) 