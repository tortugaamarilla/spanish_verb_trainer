import streamlit as st
import requests
import json
import time
import random
import anthropic
import openai
import elevenlabs
from elevenlabs.client import ElevenLabs

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–¢—Ä–µ–Ω–∞–∂—ë—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤",
    page_icon="üá™üá∏",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CSS –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
st.markdown("""
<style>
    .stButton button {
        width: 100%;
        margin-bottom: 10px;
    }
    .css-1d391kg {
        padding: 1rem 1rem;
    }
    input[type="text"] {
        font-size: 18px !important;
        height: 50px !important;
    }
    .st-emotion-cache-16idsys p {
        font-size: 18px;
    }
    .st-emotion-cache-5rimss {
        font-size: 18px;
    }
    @media (max-width: 600px) {
        .st-emotion-cache-16idsys p {
            font-size: 16px;
        }
        .st-emotion-cache-5rimss {
            font-size: 16px;
        }
    }
</style>
""", unsafe_allow_html=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
elevenlabs_api_key = st.secrets["ELEVENLABS_API_KEY"]
anthropic_api_key = st.secrets["ANTHROPIC_API_KEY"]
openai_api_key = st.secrets["OPENAI_API_KEY"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ API
elevenlabs_client = ElevenLabs(api_key=elevenlabs_api_key)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if 'current_exercise' not in st.session_state:
    st.session_state.current_exercise = {}
if 'user_answer' not in st.session_state:
    st.session_state.user_answer = ""
if 'submitted' not in st.session_state:
    st.session_state.submitted = False
if 'correct' not in st.session_state:
    st.session_state.correct = None
if 'show_translation' not in st.session_state:
    st.session_state.show_translation = False
if 'audio_ready' not in st.session_state:
    st.session_state.audio_ready = False
if 'audio_data' not in st.session_state:
    st.session_state.audio_data = None

# –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º—ë–Ω –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
TENSES = [
    "Presente",
    "Pret√©rito indefinido (perfecto simple)",
    "Pret√©rito imperfecto",
    "Pret√©rito perfecto compuesto",
    "Futuro simple",
    "Futuro compuesto"
]

FORMS = [
    "Participio",
    "Gerundio"
]

CONSTRUCTIONS = [
    "Estar + gerundio",
    "Ir a + infinitivo",
    "Acabar de + infinitivo",
    "Tener que + infinitivo",
    "Deber + infinitivo",
    "Poder + infinitivo",
    "Volver a + infinitivo",
    "Pronombres (–ø—Ä–∏—Ç—è–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –ø—Ä.)"
]

def get_llm_response(prompt, model="claude"):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π LLM –º–æ–¥–µ–ª–∏"""
    try:
        if model == "claude":
            client = anthropic.Anthropic(api_key=anthropic_api_key)
            response = client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=1000,
                temperature=0.2,
                messages=[
                    {"role": "user", "content": prompt}
                ]
            )
            return response.content[0].text
        elif model == "gpt":
            client = openai.OpenAI(api_key=openai_api_key)
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.2,
                max_tokens=1000
            )
            return response.choices[0].message.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

def generate_exercise(model="claude"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ LLM"""
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    all_options = TENSES + FORMS + CONSTRUCTIONS
    selected_option = random.choice(all_options)
    
    prompt = f"""
    –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º —è–∑—ã–∫–µ (Castellano, –ò—Å–ø–∞–Ω–∏—è) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥–ª–∞–≥–æ–ª–∞ –≤ —Ñ–æ—Ä–º–µ "{selected_option}".
    
    –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{
        "sentence": "–ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–æ–º",
        "incomplete_sentence": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∞ –º–µ—Å—Ç–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞",
        "verb_infinitive": "–≥–ª–∞–≥–æ–ª –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ",
        "tense": "{selected_option}",
        "correct_form": "–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –≥–ª–∞–≥–æ–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –ø—Ä–æ–ø—É—Å–∫–µ",
        "explanation": "–∫—Ä–∞—Ç–∫–æ–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç—Ç–∞ —Ñ–æ—Ä–º–∞",
        "translation": "–ø–µ—Ä–µ–≤–æ–¥ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"
    }}
    
    –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞ –∏ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞.
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö/–ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏—Ö –∏–∑—É—á–∞—Ç—å –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫.
    """
    
    response = get_llm_response(prompt, model)
    if response:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_start = response.find('{')
            json_end = response.rfind('}') + 1
            json_str = response[json_start:json_end]
            exercise = json.loads(json_str)
            return exercise
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return None
    return None

def check_answer(user_input, correct_answer):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    user_norm = user_input.strip().lower()
    correct_norm = correct_answer.strip().lower()
    return user_norm == correct_norm

def generate_audio(text, voice_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Elevenlabs API"""
    try:
        audio = elevenlabs_client.generate(
            text=text,
            voice=voice_id,
            model="eleven_multilingual_v2"
        )
        return audio.content
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

def next_exercise():
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é"""
    st.session_state.current_exercise = generate_exercise(st.session_state.selected_model)
    st.session_state.user_answer = ""
    st.session_state.submitted = False
    st.session_state.correct = None
    st.session_state.show_translation = False
    st.session_state.audio_ready = False
    st.session_state.audio_data = None

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    st.session_state.selected_model = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ LLM –º–æ–¥–µ–ª—å:",
        options=["claude", "gpt"],
        index=0,
        format_func=lambda x: "Claude 3.7 Sonnet" if x == "claude" else "GPT-4o"
    )
    
    st.session_state.selected_voice = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:",
        options=["Jhenny Antiques", "Benjamin"],
        index=0
    )
    
    voice_id_map = {
        "Jhenny Antiques": "2Lb1en5ujrODDIqmp7F3",
        "Benjamin": "LruHrtVF6PSyGItzMNHS"
    }
    st.session_state.voice_id = voice_id_map[st.session_state.selected_voice]

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("–¢—Ä–µ–Ω–∞–∂—ë—Ä –∏—Å–ø–∞–Ω—Å–∫–∏—Ö –≥–ª–∞–≥–æ–ª–æ–≤ üá™üá∏")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
if not st.session_state.current_exercise:
    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏–µ..."):
        st.session_state.current_exercise = generate_exercise(st.session_state.selected_model)

# –ï—Å–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ
if st.session_state.current_exercise:
    exercise = st.session_state.current_exercise
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–∞ –≥–ª–∞–≥–æ–ª–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
    st.markdown(f"### {exercise['verb_infinitive']} ({exercise['tense']})")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø—Ä–æ–ø—É—Å–∫–æ–º
    st.markdown(f"**{exercise['incomplete_sentence']}**")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    user_input = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞:",
        value=st.session_state.user_answer,
        key="answer_input",
        disabled=st.session_state.submitted
    )
    
    # –ö–Ω–æ–ø–∫–∏
    col1, col2 = st.columns(2)
    
    with col1:
        check_button = st.button(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å",
            disabled=st.session_state.submitted,
            use_container_width=True
        )
    
    with col2:
        translate_button = st.button(
            "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
            use_container_width=True
        )
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if check_button:
        st.session_state.user_answer = user_input
        st.session_state.submitted = True
        st.session_state.correct = check_answer(user_input, exercise['correct_form'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ..."):
            st.session_state.audio_data = generate_audio(
                exercise['sentence'],
                st.session_state.voice_id
            )
            st.session_state.audio_ready = True
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.rerun()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if st.session_state.submitted:
        if st.session_state.correct:
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: **{exercise['correct_form']}**")
            st.info(f"**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {exercise['explanation']}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    if translate_button:
        st.session_state.show_translation = True
    
    if st.session_state.show_translation:
        st.info(f"**–ü–µ—Ä–µ–≤–æ–¥:** {exercise['translation']}")
    
    # –ö–Ω–æ–ø–∫–∏ "–û–∑–≤—É—á–∏—Ç—å" –∏ "–î–∞–ª–µ–µ"
    col3, col4 = st.columns(2)
    
    with col3:
        if st.session_state.submitted and st.session_state.audio_ready:
            audio_button = st.button(
                "üîä –û–∑–≤—É—á–∏—Ç—å",
                use_container_width=True
            )
            if audio_button and st.session_state.audio_data:
                try:
                    st.audio(st.session_state.audio_data, format="audio/mp3")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
    
    with col4:
        next_button = st.button(
            "–î–∞–ª–µ–µ ‚û°Ô∏è",
            use_container_width=True
        )
        if next_button:
            with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ..."):
                next_exercise()
                st.rerun()
else:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    if st.button("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"):
        next_exercise()
        st.rerun() 